    Запускаем Django shell

python manage.py shell

    Импортируем модель news

>>>from news.models import *

    1. Создаем двух пользователей
       (с помощью метода User.objects.create_user('username')).


>>>user1 = User.objects.create_user(username='Art')
>>> user1
<User: Artur>

>>> user2 = User.objects.create_user(username='Serge')
>>> user2
<User: Sergey>

    2. Создаем два объекта модели Author, связанные с пользователями.
>>>author1 = Author.objects.create(author_user=user1)
>>>author2 = Author.objects.create(author_user=user2)

    3. Добавляем 4 категории в модель Category.
>>> Category.objects.create(title='IT')
<Category: Category object (1)>

>>> Category.objects.create(title='Sport')
<Category: Category object (2)>

>>> Category.objects.create(title='Games')
<Category: Category object (3)>

>>> Category.objects.create(title='Health')
<Category: Category object (4)>

     4. Добавляем 2 статьи и 1 новость.
>>> post1 = Post.objects.create(author=author1, category_choices='AR', heading='All about the IT sphere', text='Areas of application, popular professions, their pros and cons')
>>> post2=Post.objects.create(author=author2, category_choices='AR', heading='Health and Sport', text='Sports and a healthy lifestyle – how are they related')
>>> news1 = Post.objects.create(author=author2, category_choices='NW', heading='The world of computer games', text='The best games of 2023')

    5. Присвоим им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> post1.post_category.add(Category.objects.get(id=1))
>>> post2.post_category.add(Category.objects.get(id=4))
>>> post2.post_category.add(Category.objects.get(id=2))
>>> news1.post_category.add(Category.objects.get(id=3))

    6. Создать как минимум 4 комментария к разным объектам модели Post
    (в каждом объекте должен быть как минимум один комментарий).
>>> comment1 = Comment.objects.create(post_com=post1, user=user1, text_com='Very interesting!')
>>> comment2 = Comment.objects.create(post_com=post2, user=user2, text_com='Useful article')
>>> comment3 = Comment.objects.create(post_com=post2, user=user1, text_com='A lot of useful information')
>>> comment4 = Comment.objects.create(post_com=news1, user=user2, text_com='Good games!!!')

    7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> post1.like()
>>> post1.rating
1
>>>post2.dislike()
>>>news1.like()
>>>comment1.like()
>>>comment1.like()
>>>comment2.dislike()
>>>comment3.like()
>>>comment4.like()
>>>news1.like()

    8. Обновить рейтинги пользователей.
retAuthor1 = Author.objects.get(id=1)
retAuthor1.update()
retAuthor1.ratingAuthor
retAuthor2 = Author.objects.get(id=2)
retAuthor2.update()
retAuthor2.ratingAuthor

    9. Вывести username и рейтинг лучшего пользователя
    (применяя сортировку и возвращая поля первого объекта).
best_user = Author.objects.order_by('-ratingAut')[:1]
for i in best_user:
	i.author_user.username
	i.ratingAuthor

	2 способ:

best_user = Author.objects.order_by('-ratingAuthor').first()
print(best_user.author_user.username, best_user.ratingAuthor)

    10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
     основываясь на лайках/дислайках к этой статье.

best_post = Post.objects.order_by('-rating').first()
date_added = best_post.creationDate
username = best_post.author.author_user.username
rating = best_post.rating
heading = best_post.heading
preview = best_post.preview()
print(f"Дата добавления:{date_added} Автор:{username} Рейтинг:{rating} Заголовок: {heading} Превью: {preview}")

    11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
best_post = Post.objects.order_by('-rating').first()
comments = Comment.objects.filter(post_com=best_post)

for comment in comments:
    print("Дата:", comment.date_time)
    print("Пользователь:", comment.user.username)
    print("Рейтинг:", comment.rating)
    print("Текст:", comment.text_com)
    print()
print("Комментарии:")